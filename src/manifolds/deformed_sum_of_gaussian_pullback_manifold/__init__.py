from src.manifolds import Manifold
from src.manifolds.sum_of_gaussian import SumOfGaussian

import torch

class DeformedSumOfGaussianPullbackManifold(Manifold): # TODO check input discrepancies between manifold mapping input and diffeomorphism input. Latter always assumes batch dimension
    """ Base class describing a R^d under a sum of Gaussian-pullback Riemannian geometry generated by a DeformedSumofGaussian multimodal distribution """

    def __init__(self, deformed_sum_of_gaussian, p=3):
        super().__init__(deformed_sum_of_gaussian.d)
        self.dsg = deformed_sum_of_gaussian # multimodal distribution
        self.manifold = SumOfGaussian(self.d, deformed_sum_of_gaussian.psi, deformed_sum_of_gaussian.weights, p=p)
        self.p = p

    def barycentre(self, x):
        """

        :param x: N x d
        :return: d
        """
        return self.dsg.phi.inverse(self.manifold.barycentre(self.dsg.phi(x))[None])[0]

    def inner(self, x, X, Y):
        """

        :param x: N x d
        :param X: N x M x d
        :param Y: N x L x d
        :return: N x M x L
        """
        _, M, _ = X.shape
        _, L, _ = Y.shape
        return self.manifold.inner(self.dsg.phi.forward(x),
                                   self.dsg.phi.differential_forward((x[:,None] * torch.ones(M)[None,:,None]).reshape(-1,self.d), X.reshape(-1,self.d)).reshape(X.shape),
                                   self.dsg.phi.differential_forward((x[:,None] * torch.ones(L)[None,:,None]).reshape(-1,self.d), Y.reshape(-1,self.d)).reshape(Y.shape)
                                   )
    
    def geodesic(self, x, y, t, p=None):
        """

        :param x: d
        :param y: d
        :param t: N
        :return: N x d
        """
        if p is None:
            p = self.p
        return self.dsg.phi.inverse(self.manifold.geodesic(self.dsg.phi.forward(x[None])[0], self.dsg.phi.forward(y[None])[0], t, p=p))

    def log(self, x, y, p=None):
        """

        :param x: d
        :param y: N x d
        :return: N x d
        """
        if p is None:
            p = self.p
        N, _ = y.shape
        return self.dsg.phi.differential_inverse(self.dsg.phi.forward(x[None]) * torch.ones(N)[:,None],
                                                self.manifold.log(self.dsg.phi.forward(x[None])[0], self.dsg.phi.forward(y), p=p)
                                                )

    def exp(self, x, X, p=None):
        """

        :param x: d
        :param X: N x d
        :return: N x d
        """
        if p is None:
            p = self.p
        N, _ = X.shape
        return self.dsg.phi.inverse(self.manifold.exp(self.dsg.phi.forward(x[None])[0], self.dsg.phi.differential_forward(x[None] * torch.ones(N)[:,None], X), p=p))
    
    def distance(self, x, y, p=None):
        """

        :param x: N x M x d
        :param y: N x L x d
        :return: N x M x L
        """
        if p is None:
            p = self.p
        return self.manifold.distance(self.dsg.forward(x.reshape(-1,self.d)).reshape(x.shape), self.dsg.forward(y.reshape(-1,self.d)).reshape(y.shape), p=p)

    def parallel_transport(self, x, X, y, p=None):
        """

        :param x: d
        :param X: N x d
        :param y: d
        :return: N x d
        """
        N, _ = X.shape
        return self.dsg.phi.differential_inverse(self.dsg.phi.forward(y[None]) * torch.ones(N)[:,None],
                                                self.manifold.parallel_transport(self.dsg.phi.forward(x[None])[0],
                                                                                 self.dsg.phi.differential_forward(x[None] * torch.ones(N)[:,None], X),
                                                                                 self.dsg.phi.forward(y[None])[0]
                                                                                 )
                                                )