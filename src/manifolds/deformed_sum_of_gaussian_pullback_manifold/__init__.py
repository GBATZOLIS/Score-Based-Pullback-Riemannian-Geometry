from src.manifolds import Manifold
from src.manifolds.discrete_time_manifolds.sum_of_gaussian.sum_of_diagonal import SumOfDiagonal

import torch

class DeformedSumOfGaussianPullbackManifold(Manifold): # TODO check input discrepancies between manifold mapping input and diffeomorphism input. Latter always assumes batch dimension
    """ Base class describing a R^d under a sum of Gaussian-pullback Riemannian geometry generated by a DeformedSumofGaussian multimodal distribution """

    def __init__(self, deformed_sum_of_gaussian, L1=100, tol1=1e-2, max_iter1=20000, step_size1=1/8, L2=200, tol2=1e-4, max_iter2=200): 
        super().__init__(deformed_sum_of_gaussian.d)
        self.dsg = deformed_sum_of_gaussian # multimodal distribution
        self.manifold = SumOfDiagonal(self.d, deformed_sum_of_gaussian.psi, deformed_sum_of_gaussian.weights, 
                                      L1=L1, tol1=tol1, max_iter1=max_iter1, step_size1=step_size1, 
                                      L2=L2, tol2=tol2, max_iter2=max_iter2)
        
        self.L1 = self.manifold.L1
        self.tol1 = self.manifold.tol1
        self.max_iter1 = self.manifold.max_iter1
        self.step_size1 = self.manifold.step_size1

        self.L2 = self.manifold.L2
        self.tol2 = self.manifold.tol2
        self.max_iter2 = self.manifold.max_iter2

    def ricci_scalar(self, x):
        """
        R
        :param x: N x d
        :return: N 
        """
        return self.manifold.ricci_scalar(self.dsg.phi(x))

    def barycentre(self, x):
        """

        :param x: N x d
        :return: d
        """
        return self.dsg.phi.inverse(self.manifold.barycentre(self.dsg.phi(x))[None])[0]

    def inner(self, x, X, Y):
        """

        :param x: N x d
        :param X: N x M x d
        :param Y: N x L x d
        :return: N x M x L
        """
        _, M, _ = X.shape
        _, L, _ = Y.shape
        return self.manifold.inner(self.dsg.phi.forward(x),
                                   self.dsg.phi.differential_forward((x[:,None] * torch.ones(M)[None,:,None]).reshape(-1,self.d), X.reshape(-1,self.d)).reshape(X.shape),
                                   self.dsg.phi.differential_forward((x[:,None] * torch.ones(L)[None,:,None]).reshape(-1,self.d), Y.reshape(-1,self.d)).reshape(Y.shape)
                                   )
    
    def geodesic(self, x, y, t, num_intervals=10, num_time_points=200, num_epochs=1000, lr=1e-4, initialize=True, num_sines=1):
        """

        :param x: d
        :param y: d
        :param t: N
        :return: N x d
        """
        return self.dsg.phi.inverse(self.manifold.geodesic(self.dsg.phi.forward(x[None])[0], self.dsg.phi.forward(y[None])[0], t, 
                                                           num_intervals=num_intervals, num_time_points=num_time_points, num_epochs=num_epochs, lr=lr, 
                                                           initialize=initialize, num_sines=num_sines))

    def log(self, x, y, num_intervals=10, num_time_points=200, num_epochs=1000, lr=1e-4, initialize=True, num_sines=1):
        """

        :param x: d
        :param y: N x d
        :return: N x d
        """
        N, _ = y.shape
        return self.dsg.phi.differential_inverse(self.dsg.phi.forward(x[None]) * torch.ones(N)[:,None],
                                                self.manifold.log(self.dsg.phi.forward(x[None])[0], self.dsg.phi.forward(y),
                                                                  num_intervals=num_intervals, num_time_points=num_time_points, num_epochs=num_epochs, lr=lr, 
                                                                  initialize=initialize, num_sines=num_sines)
                                                )

    def exp(self, x, X, num_intervals=200):
        """

        :param x: d
        :param X: N x d
        :return: N x d
        """
        N, _ = X.shape
        return self.dsg.phi.inverse(self.manifold.exp(self.dsg.phi.forward(x[None])[0], self.dsg.phi.differential_forward(x[None] * torch.ones(N)[:,None], X), num_intervals=num_intervals))
    
    def distance(self, x, y, num_intervals=10, num_time_points=200, num_epochs=1000, lr=1e-4, initialize=True, num_sines=1):
        """

        :param x: N x M x d
        :param y: N x L x d
        :return: N x M x L
        """
        return self.manifold.distance(self.dsg.phi.forward(x.reshape(-1,self.d)).reshape(x.shape), self.dsg.phi.forward(y.reshape(-1,self.d)).reshape(y.shape), 
                                                                          num_intervals=num_intervals, num_time_points=num_time_points, num_epochs=num_epochs, lr=lr, 
                                                                          initialize=initialize, num_sines=num_sines)

    def parallel_transport(self, x, X, y, num_bv_intervals=10, num_bv_time_points=200, num_bv_epochs=1000, bv_lr=1e-4, num_iv_intervals=200, initialize=True, num_sines=1):
        """

        :param x: d
        :param X: N x d
        :param y: d
        :return: N x d
        """
        N, _ = X.shape
        return self.dsg.phi.differential_inverse(self.dsg.phi.forward(y[None]) * torch.ones(N)[:,None],
                                                self.manifold.parallel_transport(self.dsg.phi.forward(x[None])[0],
                                                                                 self.dsg.phi.differential_forward(x[None] * torch.ones(N)[:,None], X),
                                                                                 self.dsg.phi.forward(y[None])[0],
                                                                                 num_bv_intervals=num_bv_intervals, 
                                                                                 num_bv_time_points=num_bv_time_points, num_bv_epochs=num_bv_epochs, bv_lr=bv_lr, num_iv_intervals=num_iv_intervals, 
                                                                                 initialize=initialize, num_sines=num_sines
                                                                                 )
                                                )